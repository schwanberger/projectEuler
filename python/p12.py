# Highly divisible triangular number: https://projecteuler.net/problem=12
# Problem 12 
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?

# from eulerhelpers.prime import sieve

'''if n has prime decompositon p1**a1 p2**a2 ... pn**an
   then number of factors are (a1+1)*(a2+2)*....*(an+1)
   https://mathschallenge.net/index.php?section=faq&ref=number/number_of_divisors'''

# Smallest number, A, with exactly 500 divisors must be
# 2**4 * 3**4 * 5**4 * 7 * 11 = 62370000 
# Generating triangle number can be shown to be n(n+1)/2 so a triangle number close to A is n = 11167 


def triangleNumbers(n):
    return n * (n + 1) * 0.5

        
def numofFactors(n):
    count = 1
    for x in xrange(1, int(0.5 * n) + 1):
        if n % x == 0:
            count += 1
    return count


def brute():    
    n = 11167 - 1
    while 1:
        
        n += 1
        triangleNum = triangleNumbers(n)
        c = numofFactors(triangleNum)
        print triangleNum , c
        
        if c >= 500 or triangleNum >= 82535336:
            print triangleNum
            print c
            break

# print numofFactors(100)
# brute()

